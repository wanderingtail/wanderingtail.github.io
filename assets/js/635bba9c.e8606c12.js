"use strict";(self.webpackChunkwanderingtail=self.webpackChunkwanderingtail||[]).push([[7720],{2219:(e,n,o)=>{o.d(n,{A:()=>a});const a=o.p+"assets/images/imagem2-14854f81d2e85a952578a3d30a0762e9.png"},4576:(e,n,o)=>{o.d(n,{A:()=>a});const a=o.p+"assets/images/imagem1-3f1c54b7428c2e7bd92a93d0dd35de17.png"},4738:(e,n,o)=>{o.d(n,{A:()=>a});const a=o.p+"assets/images/imagem3-8e1f880f9a7a760183d6c840dc24c7b4.png"},5956:(e,n,o)=>{o.d(n,{A:()=>a});const a=o.p+"assets/images/imagem5-a9a5cef07ea2d7112d023fc6d1be3399.png"},6799:(e,n,o)=>{o.d(n,{A:()=>a});const a=o.p+"assets/images/imagem6-0b0b4fbe804ed938298164dbd6b92f49.png"},6956:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>p});var a=o(9035),t=o(4848),r=o(8453);const s={slug:"Enhanced-Input-System-usando-c++",title:"Implementando o novo Enhanced Input da Unreal Engine usando C++",authors:"kelvin",tags:["tutorial"]},i="Qual a diferen\xe7a?",c={authorsImageUrls:[void 0]},p=[{value:"Exemplos",id:"exemplos",level:2},{value:"Implementando em C++",id:"implementando-em-c",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Ol\xe1, a muito tempo n\xe3o escrevo nada aqui. Desta vez \xe9 sem enrola\xe7\xe3o vou direto ao assunto; Recentemente (n\xe3o t\xe3o recente assim) a ",(0,t.jsx)(n.strong,{children:"Unreal Engine"})," colocou o antigo Input System em Obsoleto. Por padr\xe3o nas novas vers\xf5es da Engine  o novo Input System j\xe1 vem habilitado."]}),"\n",(0,t.jsxs)(n.p,{children:["O antigo input system era definido no ",(0,t.jsx)(n.strong,{children:"Project Settings"})," da Engine , era necess\xe1rio criar os Action Mappings e os Axis Mappings na aba Input e chamar a a\xe7\xe3o dentro do Blueprint, j\xe1 no novo sistema \xe9 tudo mais din\xe2mico cada a\xe7\xe3o \xe9 definida em um arquivo do tipo ",(0,t.jsx)(n.strong,{children:"Input Action"})," e setado em um arquivo do tipo ",(0,t.jsx)(n.strong,{children:"Input Mapping Context"}),", este serve como uma cole\xe7\xe3o de Input Action, podendo conter varios tipos de a\xe7\xf5es diferentes e ser setado de forma din\xe2mica de acordo com a necessidade."]}),"\n",(0,t.jsx)(n.h2,{id:"exemplos",children:"Exemplos"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input System Antigo"}),":\r\n",(0,t.jsx)(n.img,{alt:"Demonstra\xe7\xe3o de como era o antigo Input System.",src:o(4576).A+"",width:"1254",height:"676"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input System Novo"}),":\r\n",(0,t.jsx)(n.img,{alt:"Demosmtra\xe7\xe3o de como \xe9 o novo",src:o(2219).A+"",width:"1516",height:"965"})]}),"\n",(0,t.jsx)(n.h2,{id:"implementando-em-c",children:"Implementando em C++"}),"\n",(0,t.jsx)(n.p,{children:"Por padr\xe3o a Unreal ainda n\xe3o cria a classe Character com os novos inputs, abaixo irei ensinar como criar a base do seu Character usando o Enhanced Input System:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Primeiro verifique se o Plugin est\xe1 habilitado"}),"\r\n",(0,t.jsx)(n.img,{alt:"Verifique se est\xe1 habilitado",src:o(4738).A+"",width:"1254",height:"677"})]}),"\n",(0,t.jsxs)(n.p,{children:["Caso prefira habilitar o plugin pela sua IDE adicione as seguintes linhas no seu *",(0,t.jsx)(n.strong,{children:".uproject"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'"Plugins": [\r\n\t{\r\n\t\t"Name": "EnhancedInput",\r\n\t\t"Enabled": true\r\n\t},\r\n]\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Habilitando o EnhancedPlayerInput"}),"\r\nNa Engine v\xe1 para ",(0,t.jsx)(n.strong,{children:"Edit>Project Settings>Input"})," e em Default Classes defina\r\n",(0,t.jsx)(n.strong,{children:"EnhancedPlayerInput"})," no ",(0,t.jsx)(n.em,{children:"Default Player Input Class"})," e ",(0,t.jsx)(n.strong,{children:"EnhancedInputComponent"})," em ",(0,t.jsx)(n.em,{children:"Default Input Component Class"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Setando Input como default",src:o(8989).A+"",width:"1255",height:"681"})}),"\n",(0,t.jsxs)(n.p,{children:["Agora na sua IDE abra o arquivo\r\n*",(0,t.jsx)(n.strong,{children:".Build.cs"}),' e adicione "EnhancedInput" dentro de ',(0,t.jsx)(n.strong,{children:"PublicDependencyModuleNames"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'PublicDependencyModuleNames.AddRange(new string[]\r\n\t{\r\n\t\t"Core",\r\n\t\t"CoreUObject",\r\n\t\t"Engine",\r\n\t\t"InputCore",\r\n\t\t"EnhancedInput"\r\n\t});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Vamos para o c\xf3digo, o Input precisa ser adicionado no seu personagem, caso j\xe1 tenha um script de personagem apenas edite, caso contr\xe1rio crie um novo script usando a classe ",(0,t.jsx)(n.strong,{children:"ACharacter"})," como heran\xe7a, depois adicione a seguinte linha de c\xf3digo no .h do seu personagem para definirmos no editor depois."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'protected:\r\n\tUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Enhanced Input")  \r\n\tclass UInputMappingContext* InputMapping;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Por padr\xe3o todos os personagem ",(0,t.jsx)(n.strong,{children:"ACharacter"})," possuem uma fun\xe7\xe3o chamada ",(0,t.jsx)(n.strong,{children:"SetupPlayerInputComponent"}),", precisamos adicionar o novo input no player, para isso remova todo o c\xf3digo que j\xe1 estiver dentro dessa fun\xe7\xe3o no .cpp do personagem e substituia pelo seguinte c\xf3digo:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void ASCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)  \r\n{  \r\nSuper::SetupPlayerInputComponent(PlayerInputComponent);  \r\n// Get the player controller  \r\nAPlayerController* PC = Cast<APlayerController>(GetController());  \r\n  \r\n// Get the local player subsystem  \r\nUEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem<UEnhancedInputLocalPlayerSubsystem>(PC->GetLocalPlayer());  \r\n// Clear out existing mapping, and add our mapping  \r\nSubsystem->ClearAllMappings();  \r\nSubsystem->AddMappingContext(InputMapping, 0);  \r\n  \r\n// Get the EnhancedInputComponent  \r\nUEnhancedInputComponent* PEI = Cast<UEnhancedInputComponent>(PlayerInputComponent);  \r\n  \r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Adicione tamb\xe9m esses headers:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include "InputMappingContext.h"\r\n#include "EnhancedInputSubsystems.h"\r\n#include "EnhancedInput/Public/EnhancedInputComponent.h"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Compile para ver se tudo ocorreu bem."}),"\n",(0,t.jsxs)(n.p,{children:["Novamente no .h do seu personagem adicione uma referencia a classe ",(0,t.jsx)(n.strong,{children:"UInputAction"})," no topo para n\xe3o precisar adicionar os .h da classe, logo abaixo os includes"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void ASCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)  \r\n{  \r\nSuper::SetupPlayerInputComponent(PlayerInputComponent);  \r\n// Get the player controller  \r\nAPlayerController* PC = Cast<APlayerController>(GetController());  \r\n  \r\n// Get the local player subsystem  \r\nUEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem<UEnhancedInputLocalPlayerSubsystem>(PC->GetLocalPlayer());  \r\n// Clear out existing mapping, and add our mapping  \r\nSubsystem->ClearAllMappings();  \r\nSubsystem->AddMappingContext(InputMapping, 0);  \r\n  \r\n// Get the EnhancedInputComponent  \r\nUEnhancedInputComponent* PEI = Cast<UEnhancedInputComponent>(PlayerInputComponent);  \r\n  \r\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class UInputAction;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Na parte publica defina os Inputs que deseja usar, exemplo:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Enhanced Input")  \r\nUInputAction* InputMove;  \r\n  \r\nUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Enhanced Input")  \r\nUInputAction* InputLook;\n'})}),"\n",(0,t.jsx)(n.p,{children:"Ainda no .h crie as fun\xe7\xf5es que ser\xe3o chamadas quando ocorrer a a\xe7\xe3o:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void Move(const FInputActionValue& Value);  \r\n  \r\nvoid Look(const FInputActionValue& Value);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Agora no .cpp crie a chamada das fun\xe7\xf5es:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void ASCharacter::Move(const FInputActionValue& Value)  \r\n{  \r\n\tconst FVector2D MoveValue = Value.Get<FVector2D>();  \r\n\tif (MoveValue.Y != 0.f)  \r\n\t{  \r\n\t\tAddMovementInput(GetActorForwardVector(), MoveValue.Y);  \r\n\t}  \r\n}  \r\n  \r\nvoid ASCharacter::Look(const FInputActionValue& Value)  \r\n{  \r\n\tconst FVector2D LookValue = Value.Get<FVector2D>();  \r\n  \r\n\tif (LookValue.X != 0.f)  \r\n\t{  \r\n\t\tAddControllerYawInput(LookValue.X);  \r\n\t}  \r\n  \r\n\tif (LookValue.Y != 0.f)  \r\n\t{  \r\n\t\tAddControllerPitchInput(LookValue.Y);  \r\n\t}  \r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["No exemplo acima criei duas fun\xe7\xf5es, uma para se mover e outra para olhar para os lados.\r\nNo .cpp do seu personagem na fun\xe7\xe3o ",(0,t.jsx)(n.strong,{children:"SetupPlayerInputComponent"})," adicione essas linhas de c\xf3digo:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"PEI->BindAction(InputMove, ETriggerEvent::Triggered, this, &ASCharacter::Move);  \r\nPEI->BindAction(InputLook, ETriggerEvent::Triggered, this, &ASCharacter::Look);\n"})}),"\n",(0,t.jsx)(n.p,{children:"A fun\xe7\xe3o vai ficar assim:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void ASCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)  \r\n{  \r\nSuper::SetupPlayerInputComponent(PlayerInputComponent);  \r\n// Get the player controller  \r\nAPlayerController* PC = Cast<APlayerController>(GetController());  \r\n  \r\n// Get the local player subsystem  \r\nUEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem<UEnhancedInputLocalPlayerSubsystem>(PC->GetLocalPlayer());  \r\n// Clear out existing mapping, and add our mapping  \r\nSubsystem->ClearAllMappings();  \r\nSubsystem->AddMappingContext(InputMapping, 0);  \r\n  \r\n// Get the EnhancedInputComponent  \r\nUEnhancedInputComponent* PEI = Cast<UEnhancedInputComponent>(PlayerInputComponent);  \r\n  \r\nPEI->BindAction(InputMove, ETriggerEvent::Triggered, this, &ASCharacter::Move);  \r\nPEI->BindAction(InputLook, ETriggerEvent::Triggered, this, &ASCharacter::Look);  \r\n  \r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Essas 2 novas linhas pegam o ",(0,t.jsx)(n.strong,{children:"EnhancedInputComponent"})," e registra a fun\xe7\xe3o a ser chamada quando ocorrer a a\xe7\xe3o. Com isso nossa base no c++ est\xe1 pronta."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Compile o projeto e tenha certeza que n\xe3o deu nenhum erro."})}),"\n",(0,t.jsxs)(n.p,{children:["Agora \xe9 necess\xe1rio criar um pesonagem baseado na nova classe que criamos(ou editamos).\r\nNo Blueprint do seu personagem ser\xe1 necess\xe1rio setar 3 campos (de acordo com o exemplo acima, usando 2 Input Actions).\r\nPara isso precisamos criar o ",(0,t.jsx)(n.strong,{children:"Input Mapping Context"})," , clique com o bot\xe3o direito  em alguma de suas pastas no projeto e navegue at\xe9 Input>Input Mapping Context , nomeie com o nome que achar melhor, e em seguida crie 2 arquivos do tipo ",(0,t.jsx)(n.strong,{children:"Input Action"})," (clique direito Input>Input Action), defina o nome que desejar no meu caso usei IA_Look e IA_Move. Abra o arquivo do tipo Input Mapping Context que voc\xea criou, e adicione os 2 Input Action que voc\xea criou."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:o(5956).A+"",width:"1920",height:"446"})}),"\n",(0,t.jsx)(n.p,{children:"No meu caso criei um Input para se mover e outro para olhar, o Enhanced Input System tem muitas funcionalidades interessantes, um exemplo \xe9 que \xe9 poss\xedvel criar combos, mas isso fica para um post futuro, vou mostrar como adicionar um movimento b\xe1sico."}),"\n",(0,t.jsxs)(n.p,{children:["No IA_Move adicionei duas a\xe7\xf5es, ao apertar W e ao apertar S, \xe9 necess\xe1rio adicionar modificadores, no W apenas adicionei o modificador de movimenta\xe7\xe3o no eixo, j\xe1 no S antes da movimenta\xe7\xe3o adicionei um ",(0,t.jsx)(n.strong,{children:"Negate"})," que serve para o contr\xe1rio da a\xe7\xe3o seguinte.\r\n",(0,t.jsx)(n.img,{alt:"IA_Move",src:o(6799).A+"",width:"1920",height:"740"})]}),"\n",(0,t.jsxs)(n.p,{children:["Ja no IA_Look apenas adicionei um ",(0,t.jsx)(n.strong,{children:"Mouse XY 2D-Axis"}),", que serve para capturar a posi\xe7\xe3o do mouse.\r\n",(0,t.jsx)(n.img,{alt:"IA_Move",src:o(7782).A+"",width:"1916",height:"619"})]}),"\n",(0,t.jsx)(n.p,{children:"Agora abra o Blueprint do seu personagem e em Details procure por Enhanced Input e adicione o arquivo Input Mapping Context e os Input Action que voc\xea criou.\r\nFeito isso s\xf3 rodar a cena. Voc\xea pode adicionar quantas a\xe7\xf5es desejar e customizar a funcionalidade. Em Blueprint \xe9 muito mais simples. Basta definir como vari\xe1vel um InputAction e chamar o evento no Blueprint."}),"\n",(0,t.jsxs)(n.p,{children:["Source code aqui ",(0,t.jsx)(n.a,{href:"https://gist.github.com/kelvinRosa/6395e71474fda729ff30f2d8f46aad58",children:"https://gist.github.com/kelvinRosa/6395e71474fda729ff30f2d8f46aad58"})," :"]}),"\n",(0,t.jsx)("script",{src:"https://gist.github.com/kelvinRosa/6395e71474fda729ff30f2d8f46aad58.js"})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},7782:(e,n,o)=>{o.d(n,{A:()=>a});const a=o.p+"assets/images/imagem7-fa700a13a665d3546418563bab7873aa.png"},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>i});var a=o(6540);const t={},r=a.createContext(t);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(r.Provider,{value:n},e.children)}},8989:(e,n,o)=>{o.d(n,{A:()=>a});const a=o.p+"assets/images/imagem4-ebc2964621ebd6e145056b6df0f9d3bd.png"},9035:e=>{e.exports=JSON.parse('{"permalink":"/blog/Enhanced-Input-System-usando-c++","source":"@site/blog/2023-08-27-Enhanced-Input-System-usando-c++/index.md","title":"Implementando o novo Enhanced Input da Unreal Engine usando C++","description":"Ol\xe1, a muito tempo n\xe3o escrevo nada aqui. Desta vez \xe9 sem enrola\xe7\xe3o vou direto ao assunto; Recentemente (n\xe3o t\xe3o recente assim) a Unreal Engine colocou o antigo Input System em Obsoleto. Por padr\xe3o nas novas vers\xf5es da Engine  o novo Input System j\xe1 vem habilitado.","date":"2023-08-27T00:00:00.000Z","tags":[{"inline":false,"label":"Tutorial","permalink":"/blog/tags/tutorial","description":"Tutorials"}],"readingTime":5.5,"hasTruncateMarker":true,"authors":[{"name":"Kelvin Rosa","title":"Founder Wandering Tail, Founder Lightshaft, Senior Game Developer","url":"https://www.linkedin.com/in/kelvin-rosa-0012a041/","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/lightshaftdev","linkedin":"https://www.linkedin.com/in/kelvin-rosa-0012a041/","github":"https://github.com/KelvinRosa"},"imageURL":"https://avatars.githubusercontent.com/u/5130872?s=96&v=4","key":"kelvin"}],"frontMatter":{"slug":"Enhanced-Input-System-usando-c++","title":"Implementando o novo Enhanced Input da Unreal Engine usando C++","authors":"kelvin","tags":["tutorial"]},"unlisted":false,"prevItem":{"title":"Participando da minha primeira jam oficial com um time","permalink":"/blog/Spooktober-jam"},"nextItem":{"title":"Como iniciar o desenvolvimento de games do zero","permalink":"/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero"}}')}}]);