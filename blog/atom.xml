<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wanderingtail.github.io/blog</id>
    <title>The Wandering Tail Blog</title>
    <updated>2024-10-01T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wanderingtail.github.io/blog"/>
    <subtitle>The Wandering Tail Blog</subtitle>
    <icon>https://wanderingtail.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Participando da minha primeira jam oficial com um time]]></title>
        <id>https://wanderingtail.github.io/blog/Spooktober-jam</id>
        <link href="https://wanderingtail.github.io/blog/Spooktober-jam"/>
        <updated>2024-10-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Da alegria ao desespero, minha primeira jam foi igual à minha juventude... uma aventura maluca e, no fim, tive que me virar. Acompanhe essa saga insana.]]></summary>
        <content type="html"><![CDATA[<p>Da alegria ao desespero, minha primeira jam foi igual à minha juventude... uma aventura maluca e, no fim, tive que me virar. Acompanhe essa saga insana.</p>
<iframe frameborder="0" src="https://itch.io/embed/3001878" width="552" height="167"><a href="https://befinamor.itch.io/beyond-the-veil">Beyond the Veil by Triz, Frost</a></iframe>
<p>Spooktober Jam 2024. Estava eu numa fase empolgada, querendo participar de uma jam até o fim (já participei de outras, mas sempre sozinho, e acabava ficando sem tempo, não terminava o projeto e nem chegava a submeter minha participação). Graças à minha amiga Be, tive força de vontade suficiente pra me arriscar nessa jam. Combinei com a Be que eu seria o dev e a gente ia entrar junto pra procurar outros parceiros pra nossa equipe. Alguns dias antes da jam começar, fui atrás de mais pessoas pra compor o time. Precisávamos de um artista e alguém bom com som. Em poucos dias, encontrei ambos: a artista, uma chinesa-canadense com experiência em fanzines e que queria muito ter um projeto de jogo, e o músico, um francês que já tinha feito sons para curtas e alguns jogos.</p>
<p>Tínhamos formado um dream team. Eu estava muito empolgado, e acredito que a Be também. Ah, não expliquei — a Be é game designer e minha amiga. Adoro as ideias dela e o quanto ela escreve bem. Queria escrever metade do que ela escreve, já que gosto de escrever, mas acabo não ligando tanto pra forma... só escrevo e coloco pra fora do jeito que me sinto à vontade. Enfim, ela estava focada e teve uma ideia muito legal. O tema da jam era terror, e precisava ser uma visual novel. Eu nunca tinha feito uma visual novel antes. Estudei um pouco antes de escolher a tecnologia. Sou especializado na Unity Engine, mas estava de olho em outras opções. Conheci o incrível Ren'Py, uma engine open source para visual novels. Ela me serviu de inspiração pra algumas coisas no nosso jogo.</p>
<p>Com a ideia do primeiro capítulo pronta pela Be, criei um grupo no Discord e juntei todo mundo. Tinha a barreira da linguagem, mas todos falavam inglês, então foi fácil se comunicar (por texto). Tanto a artista quanto o músico adoraram a ideia e pareciam super empolgados. Mas não podíamos começar antes da data estipulada. Debatemos um pouco sobre nossas referências de horror e inspirações. Decidimos usar a cultura chinesa misturada com a brasileira nos personagens.</p>
<p>Dia de início! Assim que começou a jam, já fui conversar com o músico pra definirmos quais tecnologias usar. Ele sugeriu usarmos FMOD para o áudio. Nunca tinha usado, mas aprendi em um dia. Já comecei a fazer o setup de tudo na Unity. Comprei o plugin Naninovel, que facilitava a escrita do roteiro dentro do game, e já tinha muita coisa pronta. Mas tive que alterar e acrescentar muita coisa na engine por causa do FMOD e das interações que criamos. Nos primeiros dias comecei a prototipar tudo. Em alguns dias, a artista mandou os concepts coloridos de duas personagens da nossa história. Ficamos encantados com a arte e com o que poderia ser nosso jogo final. Doce ilusão, haha. Escrever isso me traz de volta o ódio que senti no fim de tudo.</p>
<p>Tínhamos 30 dias pra terminar o jogo. Passou uma semana e a artista só tinha mostrado os concepts das duas personagens, dizendo que estava trabalhando em outras poses. Eu fiz o primeiro capítulo do jogo com todos os diálogos e mecânicas. Tínhamos um sistema de celular, e precisei integrar o FMOD com o Naninovel — o que deu um trabalho enorme, já que o sistema do Naninovel usava AudioSource da Unity. Eu também queria sons enquanto as falas dos personagens apareciam, tipo aqueles efeitos de som quando está aparecendo o texto na tela, e queria que cada personagem tivesse uma variação diferente. Isso foi muito complicado de criar usando FMOD, mas consegui.</p>
<p>Minha preocupação maior passou a ser a demora da arte. Pela minha experiência, trabalhar com placeholders e depois fazer a troca sempre dá problemas não previstos e acaba demorando mais do que o planejado. E a gente não tinha nada de background, nem ideia de como ficariam as poses. No fim, o posicionamento e outras questões estéticas do jogo acabaram sendo definidas por mim e pela Be — não pela artista. Ela parou de perguntar sobre o jogo e não dava feedback das artes. Eu, como um cara quieto e bonzinho que não gosta de incomodar, fiquei sem falar nada na primeira semana. Na segunda semana, já me preocupei e comecei a cobrar. Ela dizia que no fim de semana teria tudo da personagem principal, e decidiu chamar uma amiga artista pra ajudar e fazer os backgrounds. A Be enviou as referências que queria, e a amiga disse que faria. Eis que surge minha segunda decepção.</p>
<p>O músico. Ele havia feito algumas criações de áudio no FMOD, subiu os arquivos e disse que era tudo o que ele tinha pensado para o primeiro capítulo. Eu abri os áudios e... meu amigo... não entendi nada. Nada fazia sentido. Alguns sons estavam superficiais, outros não combinavam. As fontes vinham de uma biblioteca paga. Fiquei preocupado com a falta de sons para várias coisas e fui eu mesmo caçar em sites de SFX gratuitos. Montei várias variações no FMOD, aprendi a criar sons 3D, fazer composições, criar parâmetros... Foi uma loucura. Uma grande XP pro meu currículo/portfólio. Porém, eu estava trabalhando bem mais do que deveria — além da minha função no projeto.</p>
<p>Comecei a me preocupar que a arte talvez não ficasse pronta. Já haviam se passado 2 semanas e a gente praticamente não tinha nada. A Be havia escrito mais uma parte da história e também começou a demonstrar preocupação. Continuei cobrando a artista, e ela fazendo promessas pro fim de semana... de novo. Na terceira semana, já sabia que não ia rolar. Conversei com a Be e decidimos pedir só os concepts, nada de arte final. Disse que podiam ser rabiscos, só pra termos algo visual. A artista se empolgou e disse que podíamos fazer o jogo em preto e branco(que é o que a gente ia fazer por isso pedi somente os rabiscos). Falou com a amiga. Durante a semana, a amiga mandou 2 backgrounds desenhados à mão e ela mandou as duas garotas em preto e branco.</p>
<p>Voltei a ter esperança. Segui para o capítulo 2, comecei a criar mecânicas, passar os textos para o Naninovel e fazer os sons. O músico sumiu. Comecei a cobrar os backgrounds e personagens e... nada. A Be já estava desanimando. Ela reduziu a ideia base do jogo, e eu, com o objetivo de lançar a submissão a todo custo, comecei a fazer coisas em 3D e tirar prints pra usar de cenário e background. Criei filtros preto-e-branco pra bater com os personagens. Continuei cobrando, e a artista só me dava prazos e não entregava.</p>
<p>Faltando 1 semana para o fim, estávamos com muitos personagens e variações faltando. De backgrounds, só tínhamos 3 — e eram vários no que ja havia sido escrito. Procurei alternativas. Usei o VRoid Studio pra criar personagens e salvar .png com poses. Deu muito trabalho e ficaram horríveis, mas eu ia lançar assim. A Be ia odiar, mas eu não ia desperdiçar meu suor e esforço.</p>
<p>Na última semana, a Be ficou até tarde comigo alinhando coisas e tentando finalizar o jogo. Ela me ajudou em tudo. Faltando 3 dias, encontrei um artista oferecendo ajuda. Perguntei se ele queria fazer uns backgrounds pra gente. Ele topou. Mandei prints de todos os backgrounds 3D e falei que ele podia desenhar por cima ou fazer do jeito dele. Em 1 dia, ele enviou praticamente todos. E aí eu pensava: por que diabos a outra pessoa demorou tanto tempo pra não enviar nada, mesmo quando a gente só pediu concept?</p>
<p>A arte final da personagem era incrível. Mas naquele estágio, a gente só queria os concepts pra conseguir participar.</p>
<p>Faltando 1 dia, a Be foi criar a página da submissão e pediu os e-mails pra colocar nos créditos. E aí... o espanto geral: todo mundo resolveu aparecer. O músico, a artista, a amiga... todo mundo. A artista parecia espantada. Senti no ar um: “Como assim... eles fizeram o jogo? Mas eu nem enviei as artes...”. Ela se ofereceu pra ajudar com a página, do nada. Rapidinho fez variações dos personagens, fez os que faltavam... em um dia.</p>
<p>E pra quem sobra o trabalho e a necessidade de rushar? Pra mim, claro. Como falei, trocar placeholders sempre dá problema. E lá fui eu adaptar os personagens. A amiga dela mandou mais backgrounds só do primeiro capitulo, mas descartei todos e usei os do salvador que apareceu na última semana. E o cara nem pediu crédito — mas colocamos lá.</p>
<p>Muito puto da vida, troquei os personagens, adaptei tudo, pedi uma alteração, ela fez — tudo no último dia. Se ela tivesse participado assim por uma semana, teríamos feito o jogo pefeito para a jam. Fiz milagre com os sons, corri com animações customizadas, mesmo nada disso sendo meu forte. Fiz até uma mecânica de desenhar um símbolo chinês com o mouse, como se fosse com sangue da personagem em um espelho. Alguns assets eu editei no Blender... entre outras loucuras.</p>
<p>No dia do envio, corri pra gerar a build e ajustar coisas com a Be. Cortamos partes, finalizei.</p>
<p>Enviei no grupo para testarem e, pela primeira vez, a artista jogou. Eu já tinha enviado builds anteriores sem arte, só com diálogos, e ela nem tinha visto. Quando terminou de jogar, começou a elogiar bastante a mim e à Be. O músico ficou chateado porque percebia que só usei a música introdutória dele — porque, sinceramente, o resto não dava pra usar. Ainda tentei fazer variações com os áudios dele pra não descartar tudo.</p>
<p>Eu estava furioso com eles aparecendo como se nada tivesse acontecido — mas fingi estar tudo bem. Até que...</p>
<p>...A artista do nada começou a surtar quando submetemos o projeto, ela do nada queria ser co-autora e disse que era pra ELA fazer o envio, e que ELA queria ter criado a página. A Be, que ficou responsável por todo o texto da página, organização e submissão, ficou sem entender muito bem a atitude da artista. Eu estava no meio tentando não explodir. A artista começou a ficar pressionando pra deixarmos ela como co-autora, e eu estava com sangue nos olhos porque NÓS (eu e a Be) tínhamos feito o jogo praticamente inteiro, enquanto a artista sumiu por 3 semanas e apareceu só no final, com artes boas, sim, mas tarde demais.</p>
<p>Fiquei indignado com a forma como ela tratou a Be, pois a culpa no geral de ela ter surtado foi minha, de quem apontou e quem não queria que ela tomasse mais que o crédito que era devido a ela. A Be apenas queria que o projeto fosse enviado, e eu também. No fim, a artista continuou atacando a gente no Discord, e eu só disse que a submissão foi feita por quem realmente estava comprometido com o projeto desde o início e a quem era devido o crédito de autor.</p>
<p>Depois disso, o grupo basicamente morreu. O músico desapareceu de novo, a amiga da artista nunca mais falou nada, e a artista ficou causando no discord, minha DM estava pura zona de guerra. Eu e a Be seguimos em frente, frustrados mas orgulhosos, mesmo com tantas adversidades. Foi uma loucura... mas conseguimos.</p>
<p>Ficamos mal por vários dias. Era como se todo o esforço tivesse sido manchado por aquele desentendimento final. Saber que o jogo foi reconhecido e elogiado só aumentou a sensação de frustração — porque poderíamos ter comemorado juntos, mas em vez disso, fomos empurrados para o silêncio.</p>
<p><img decoding="async" loading="lazy" alt="Spooktober Game Jam" src="https://wanderingtail.github.io/assets/images/btv-bb49962a9c12510a6afc45e8d4148181.png" width="1002" height="386" class="img_ev3q"></p>
<p>Link do jogo:</p>
<iframe frameborder="0" src="https://itch.io/embed/3001878" width="552" height="167"><a href="https://befinamor.itch.io/beyond-the-veil">Beyond the Veil by Triz, Frost</a></iframe>]]></content>
        <author>
            <name>Kelvin Rosa</name>
            <uri>https://www.linkedin.com/in/kelvin-rosa-0012a041/</uri>
        </author>
        <category label="Game Jam" term="Game Jam"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Implementando o novo Enhanced Input da Unreal Engine usando C++]]></title>
        <id>https://wanderingtail.github.io/blog/Enhanced-Input-System-usando-c++</id>
        <link href="https://wanderingtail.github.io/blog/Enhanced-Input-System-usando-c++"/>
        <updated>2023-08-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Olá, a muito tempo não escrevo nada aqui. Desta vez é sem enrolação vou direto ao assunto; Recentemente (não tão recente assim) a Unreal Engine colocou o antigo Input System em Obsoleto. Por padrão nas novas versões da Engine  o novo Input System já vem habilitado.]]></summary>
        <content type="html"><![CDATA[<p>Olá, a muito tempo não escrevo nada aqui. Desta vez é sem enrolação vou direto ao assunto; Recentemente (não tão recente assim) a <strong>Unreal Engine</strong> colocou o antigo Input System em Obsoleto. Por padrão nas novas versões da Engine  o novo Input System já vem habilitado.</p>
<p>O antigo input system era definido no <strong>Project Settings</strong> da Engine , era necessário criar os Action Mappings e os Axis Mappings na aba Input e chamar a ação dentro do Blueprint, já no novo sistema é tudo mais dinâmico cada ação é definida em um arquivo do tipo <strong>Input Action</strong> e setado em um arquivo do tipo <strong>Input Mapping Context</strong>, este serve como uma coleção de Input Action, podendo conter varios tipos de ações diferentes e ser setado de forma dinâmica de acordo com a necessidade.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="exemplos">Exemplos<a href="https://wanderingtail.github.io/blog/Enhanced-Input-System-usando-c++#exemplos" class="hash-link" aria-label="Direct link to Exemplos" title="Direct link to Exemplos">​</a></h2>
<p><strong>Input System Antigo</strong>:
<img decoding="async" loading="lazy" alt="Demonstração de como era o antigo Input System." src="https://wanderingtail.github.io/assets/images/imagem1-3f1c54b7428c2e7bd92a93d0dd35de17.png" width="1254" height="676" class="img_ev3q"></p>
<p><strong>Input System Novo</strong>:
<img decoding="async" loading="lazy" alt="Demosmtração de como é o novo" src="https://wanderingtail.github.io/assets/images/imagem2-14854f81d2e85a952578a3d30a0762e9.png" width="1516" height="965" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="implementando-em-c">Implementando em C++<a href="https://wanderingtail.github.io/blog/Enhanced-Input-System-usando-c++#implementando-em-c" class="hash-link" aria-label="Direct link to Implementando em C++" title="Direct link to Implementando em C++">​</a></h2>
<p>Por padrão a Unreal ainda não cria a classe Character com os novos inputs, abaixo irei ensinar como criar a base do seu Character usando o Enhanced Input System:</p>
<p><strong>Primeiro verifique se o Plugin está habilitado</strong>
<img decoding="async" loading="lazy" alt="Verifique se está habilitado" src="https://wanderingtail.github.io/assets/images/imagem3-8e1f880f9a7a760183d6c840dc24c7b4.png" width="1254" height="677" class="img_ev3q"></p>
<p>Caso prefira habilitar o plugin pela sua IDE adicione as seguintes linhas no seu *<strong>.uproject</strong></p>
<div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"Plugins": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		"Name": "EnhancedInput",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		"Enabled": true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">]</span><br></span></code></pre></div></div>
<p><strong>Habilitando o EnhancedPlayerInput</strong>
Na Engine vá para <strong>Edit&gt;Project Settings&gt;Input</strong> e em Default Classes defina
<strong>EnhancedPlayerInput</strong> no <em>Default Player Input Class</em> e <strong>EnhancedInputComponent</strong> em <em>Default Input Component Class</em></p>
<p><img decoding="async" loading="lazy" alt="Setando Input como default" src="https://wanderingtail.github.io/assets/images/imagem4-ebc2964621ebd6e145056b6df0f9d3bd.png" width="1255" height="681" class="img_ev3q"></p>
<p>Agora na sua IDE abra o arquivo
*<strong>.Build.cs</strong> e adicione "EnhancedInput" dentro de <strong>PublicDependencyModuleNames</strong>:</p>
<div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">PublicDependencyModuleNames.AddRange(new string[]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		"Core",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		"CoreUObject",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		"Engine",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		"InputCore",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		"EnhancedInput"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	});</span><br></span></code></pre></div></div>
<p>Vamos para o código, o Input precisa ser adicionado no seu personagem, caso já tenha um script de personagem apenas edite, caso contrário crie um novo script usando a classe <strong>ACharacter</strong> como herança, depois adicione a seguinte linha de código no .h do seu personagem para definirmos no editor depois.</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">protected</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token function" style="color:#d73a49">UPROPERTY</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EditDefaultsOnly</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> BlueprintReadOnly</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Category </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Enhanced Input"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">UInputMappingContext</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> InputMapping</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>Por padrão todos os personagem <strong>ACharacter</strong> possuem uma função chamada <strong>SetupPlayerInputComponent</strong>, precisamos adicionar o novo input no player, para isso remova todo o código que já estiver dentro dessa função no .cpp do personagem e substituia pelo seguinte código:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token class-name">ASCharacter</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">SetupPlayerInputComponent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">UInputComponent</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> PlayerInputComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">Super</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">SetupPlayerInputComponent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PlayerInputComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Get the player controller  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">APlayerController</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> PC </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Cast</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">APlayerController</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">GetController</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Get the local player subsystem  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UEnhancedInputLocalPlayerSubsystem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> Subsystem </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ULocalPlayer</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token generic-function function" style="color:#d73a49">GetSubsystem</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">UEnhancedInputLocalPlayerSubsystem</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PC</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">GetLocalPlayer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Clear out existing mapping, and add our mapping  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Subsystem</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">ClearAllMappings</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Subsystem</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">AddMappingContext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">InputMapping</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Get the EnhancedInputComponent  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UEnhancedInputComponent</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> PEI </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Cast</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">UEnhancedInputComponent</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PlayerInputComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>Adicione também esses headers:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">"InputMappingContext.h"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">"EnhancedInputSubsystems.h"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">"EnhancedInput/Public/EnhancedInputComponent.h"</span><br></span></code></pre></div></div>
<p>Compile para ver se tudo ocorreu bem.</p>
<p>Novamente no .h do seu personagem adicione uma referencia a classe <strong>UInputAction</strong> no topo para não precisar adicionar os .h da classe, logo abaixo os includes</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token class-name">ASCharacter</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">SetupPlayerInputComponent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">UInputComponent</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> PlayerInputComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">Super</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">SetupPlayerInputComponent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PlayerInputComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Get the player controller  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">APlayerController</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> PC </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Cast</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">APlayerController</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">GetController</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Get the local player subsystem  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UEnhancedInputLocalPlayerSubsystem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> Subsystem </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ULocalPlayer</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token generic-function function" style="color:#d73a49">GetSubsystem</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">UEnhancedInputLocalPlayerSubsystem</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PC</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">GetLocalPlayer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Clear out existing mapping, and add our mapping  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Subsystem</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">ClearAllMappings</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Subsystem</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">AddMappingContext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">InputMapping</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Get the EnhancedInputComponent  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UEnhancedInputComponent</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> PEI </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Cast</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">UEnhancedInputComponent</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PlayerInputComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">UInputAction</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>Na parte publica defina os Inputs que deseja usar, exemplo:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">UPROPERTY</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EditDefaultsOnly</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> BlueprintReadOnly</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Category </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Enhanced Input"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UInputAction</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> InputMove</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">UPROPERTY</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EditDefaultsOnly</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> BlueprintReadOnly</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Category </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Enhanced Input"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UInputAction</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> InputLook</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>Ainda no .h crie as funções que serão chamadas quando ocorrer a ação:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Move</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> FInputActionValue</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> Value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Look</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> FInputActionValue</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> Value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>Agora no .cpp crie a chamada das funções:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token class-name">ASCharacter</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">Move</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> FInputActionValue</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> Value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> FVector2D MoveValue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Value</span><span class="token punctuation" style="color:#393A34">.</span><span class="token generic-function function" style="color:#d73a49">Get</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">FVector2D</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">MoveValue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Y </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.f</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token function" style="color:#d73a49">AddMovementInput</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">GetActorForwardVector</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> MoveValue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Y</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token class-name">ASCharacter</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">Look</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> FInputActionValue</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> Value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> FVector2D LookValue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Value</span><span class="token punctuation" style="color:#393A34">.</span><span class="token generic-function function" style="color:#d73a49">Get</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">FVector2D</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LookValue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">X </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.f</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token function" style="color:#d73a49">AddControllerYawInput</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LookValue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">X</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LookValue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Y </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.f</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token function" style="color:#d73a49">AddControllerPitchInput</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LookValue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Y</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>No exemplo acima criei duas funções, uma para se mover e outra para olhar para os lados.
No .cpp do seu personagem na função <strong>SetupPlayerInputComponent</strong> adicione essas linhas de código:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">PEI</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">BindAction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">InputMove</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ETriggerEvent</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">Triggered</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">ASCharacter</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">Move</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PEI</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">BindAction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">InputLook</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ETriggerEvent</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">Triggered</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">ASCharacter</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">Look</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>A função vai ficar assim:</p>
<div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token class-name">ASCharacter</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">SetupPlayerInputComponent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">UInputComponent</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> PlayerInputComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">Super</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">SetupPlayerInputComponent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PlayerInputComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Get the player controller  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">APlayerController</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> PC </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Cast</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">APlayerController</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">GetController</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Get the local player subsystem  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UEnhancedInputLocalPlayerSubsystem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> Subsystem </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ULocalPlayer</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token generic-function function" style="color:#d73a49">GetSubsystem</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">UEnhancedInputLocalPlayerSubsystem</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PC</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">GetLocalPlayer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Clear out existing mapping, and add our mapping  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Subsystem</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">ClearAllMappings</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Subsystem</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">AddMappingContext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">InputMapping</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Get the EnhancedInputComponent  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UEnhancedInputComponent</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> PEI </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">Cast</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name">UEnhancedInputComponent</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PlayerInputComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PEI</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">BindAction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">InputMove</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ETriggerEvent</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">Triggered</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">ASCharacter</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">Move</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PEI</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">BindAction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">InputLook</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ETriggerEvent</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">Triggered</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">ASCharacter</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">Look</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>Essas 2 novas linhas pegam o <strong>EnhancedInputComponent</strong> e registra a função a ser chamada quando ocorrer a ação. Com isso nossa base no c++ está pronta.</p>
<p><strong>Compile o projeto e tenha certeza que não deu nenhum erro.</strong></p>
<p>Agora é necessário criar um pesonagem baseado na nova classe que criamos(ou editamos).
No Blueprint do seu personagem será necessário setar 3 campos (de acordo com o exemplo acima, usando 2 Input Actions).
Para isso precisamos criar o <strong>Input Mapping Context</strong> , clique com o botão direito  em alguma de suas pastas no projeto e navegue até Input&gt;Input Mapping Context , nomeie com o nome que achar melhor, e em seguida crie 2 arquivos do tipo <strong>Input Action</strong> (clique direito Input&gt;Input Action), defina o nome que desejar no meu caso usei IA_Look e IA_Move. Abra o arquivo do tipo Input Mapping Context que você criou, e adicione os 2 Input Action que você criou.</p>
<p><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/imagem5-a9a5cef07ea2d7112d023fc6d1be3399.png" width="1920" height="446" class="img_ev3q"></p>
<p>No meu caso criei um Input para se mover e outro para olhar, o Enhanced Input System tem muitas funcionalidades interessantes, um exemplo é que é possível criar combos, mas isso fica para um post futuro, vou mostrar como adicionar um movimento básico.</p>
<p>No IA_Move adicionei duas ações, ao apertar W e ao apertar S, é necessário adicionar modificadores, no W apenas adicionei o modificador de movimentação no eixo, já no S antes da movimentação adicionei um <strong>Negate</strong> que serve para o contrário da ação seguinte.
<img decoding="async" loading="lazy" alt="IA_Move" src="https://wanderingtail.github.io/assets/images/imagem6-0b0b4fbe804ed938298164dbd6b92f49.png" width="1920" height="740" class="img_ev3q"></p>
<p>Ja no IA_Look apenas adicionei um <strong>Mouse XY 2D-Axis</strong>, que serve para capturar a posição do mouse.
<img decoding="async" loading="lazy" alt="IA_Move" src="https://wanderingtail.github.io/assets/images/imagem7-fa700a13a665d3546418563bab7873aa.png" width="1916" height="619" class="img_ev3q"></p>
<p>Agora abra o Blueprint do seu personagem e em Details procure por Enhanced Input e adicione o arquivo Input Mapping Context e os Input Action que você criou.
Feito isso só rodar a cena. Você pode adicionar quantas ações desejar e customizar a funcionalidade. Em Blueprint é muito mais simples. Basta definir como variável um InputAction e chamar o evento no Blueprint.</p>
<p>Source code aqui <a href="https://gist.github.com/kelvinRosa/6395e71474fda729ff30f2d8f46aad58" target="_blank" rel="noopener noreferrer">https://gist.github.com/kelvinRosa/6395e71474fda729ff30f2d8f46aad58</a> :</p>
<script src="https://gist.github.com/kelvinRosa/6395e71474fda729ff30f2d8f46aad58.js"></script>]]></content>
        <author>
            <name>Kelvin Rosa</name>
            <uri>https://www.linkedin.com/in/kelvin-rosa-0012a041/</uri>
        </author>
        <category label="Tutorial" term="Tutorial"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Como iniciar o desenvolvimento de games do zero]]></title>
        <id>https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero</id>
        <link href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero"/>
        <updated>2023-04-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hoje em dia muitas pessoas se interessam por desenvolvimento e mercado de jogos, não é atoa, estima-se que no ano de 2021 no Brasil foram movimentados cerca de R$ 6,6 bilhões.]]></summary>
        <content type="html"><![CDATA[<p>Hoje em dia muitas pessoas se interessam por desenvolvimento e mercado de jogos, não é atoa, estima-se que no ano de 2021 no Brasil foram movimentados cerca de R$ 6,6 bilhões.</p>
<p>E ai tem interesse? mas não sabe por onde começar? se liga nesse guia rápido para te dar um panorama do que fazer.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introdução">Introdução<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#introdu%C3%A7%C3%A3o" class="hash-link" aria-label="Direct link to Introdução" title="Direct link to Introdução">​</a></h2>
<p>Desenvolver um jogo já não é uma tarefa tão complicada como antigamente, mas exige um pouco de paciêcia e bastante estudo, mas pode ser uma experiência gratificante e divertida. Primeiramente você precisa ter uma ideia clara do jogo que deseja criar e aprender as habilidades necessárias para transformar essa ideia em realidade.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="escolha-a-plataforma">Escolha a Plataforma<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#escolha-a-plataforma" class="hash-link" aria-label="Direct link to Escolha a Plataforma" title="Direct link to Escolha a Plataforma">​</a></h2>
<p>Antes de começar a desenvolver seu jogo, você precisa escolher em qual plataforma ele será lançado. Isso afetará a tecnologia e as ferramentas que você precisará usar. As plataformas mais populares para jogos são PC, consoles, e mobile. Você pode desenvolver seu jogo para várias plataformas, mas isso exigirá mais tempo e esforço.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="escolha-a-engine">Escolha a Engine<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#escolha-a-engine" class="hash-link" aria-label="Direct link to Escolha a Engine" title="Direct link to Escolha a Engine">​</a></h2>
<p>A escolha da engine é crucial para o desenvolvimento do seu jogo. Existem várias engines de jogos disponíveis, cada uma com suas próprias vantagens e desvantagens. Dependedo do seu nível de conhecimento você mesmo pode desenvolver uma engine, mas para que tentar re-invetar a roda quando temos grandes engines no mercado. Algumas das engines mais populares são a Unity, Unreal Engine, GameMaker Studio e Godot. É importante pesquisar e experimentar as diferentes opções antes de escolher a engine certa para o seu jogo. A Unity por exemplo é uma game engine recomendada para usuários iniciantes mas também é recomendada para qualquer tipo de jogo.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="aprenda-a-engine">Aprenda a Engine<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#aprenda-a-engine" class="hash-link" aria-label="Direct link to Aprenda a Engine" title="Direct link to Aprenda a Engine">​</a></h2>
<p>Normalmente as próprias empresas por trás das engines criam conteúdos ditáticos ensinando a fazer jogos ou usar a engine, mas hoje em dia no youtube é o melhor lugar de se aprender, seja para começar a fazer um joguinho onde um cubo sai pulando até fazer um jogo completo e publicar.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="aprenda-a-programar">Aprenda a Programar<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#aprenda-a-programar" class="hash-link" aria-label="Direct link to Aprenda a Programar" title="Direct link to Aprenda a Programar">​</a></h2>
<p>Para desenvolver um jogo, você precisa aprender a programar, pelo menos um pouco, ou ter uma noção de lógica de programação, pois além das linguagens de programação hoje em dia a maioria das engines tem o que chamamos de programação visual, possibilitando programar, usando blocos de lógica que acaba sendo mais facil para pessoas com mais conhecimento na area de design por exemplo sair criando mecânicas mais simples, como por exemplo coletar uma moeda. Existem várias linguagens de programação que você pode usar, como C++ e C#, existem varias outras, mas as mais usadas na programação de jogos são elas. É importante escolher a linguagem certa para o seu jogo e aprender as habilidades necessárias para usar essa linguagem.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="crie-os-gráficos-e-os-sons">Crie os Gráficos e os Sons<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#crie-os-gr%C3%A1ficos-e-os-sons" class="hash-link" aria-label="Direct link to Crie os Gráficos e os Sons" title="Direct link to Crie os Gráficos e os Sons">​</a></h2>
<p>Os gráficos e os sons são uma parte fundamental do seu jogo. Eles criam a atmosfera e a imersão para os jogadores. Você pode criar seus próprios gráficos e sons ou contratar um artista e um compositor para ajudá-lo. Existem também várias bibliotecas e ferramentas disponíveis para criar gráficos e sons. Hoje em dia contamos também com a ajuda de assets que podemos adquirir de forma gratuita ou comprar nas lojas das engines.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="desenvolva-a-jogabilidade">Desenvolva a Jogabilidade<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#desenvolva-a-jogabilidade" class="hash-link" aria-label="Direct link to Desenvolva a Jogabilidade" title="Direct link to Desenvolva a Jogabilidade">​</a></h2>
<p>A jogabilidade é a parte mais importante do seu jogo. Ela determina como os jogadores interagem com o jogo e quais são os objetivos. É importante criar uma jogabilidade divertida e desafiadora para manter os jogadores engajados. Desenvolvedores indies costumam a criar jogabilidades inovadoras, não tenha medo de inovar, talves sua ideia pareça muito dificil de reproduzir inicialmente mas aprender nunca é demais.
"A mente que se abre a uma nova ideia jamais voltará ao seu tamanho original." - <em>Albert Einstein</em>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="teste-e-depure-o-seu-jogo">Teste e Depure o Seu Jogo<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#teste-e-depure-o-seu-jogo" class="hash-link" aria-label="Direct link to Teste e Depure o Seu Jogo" title="Direct link to Teste e Depure o Seu Jogo">​</a></h2>
<p>Testar e depurar seu jogo é uma etapa crucial do processo de desenvolvimento. Você precisa testar seu jogo em diferentes dispositivos e em diferentes situações para garantir que ele funcione corretamente. Você também precisa depurar quaisquer bugs ou erros que encontrar.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="lance-o-seu-jogo">Lance o Seu Jogo<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#lance-o-seu-jogo" class="hash-link" aria-label="Direct link to Lance o Seu Jogo" title="Direct link to Lance o Seu Jogo">​</a></h2>
<p>Depois de concluir o desenvolvimento do seu jogo, é hora de lançá-lo. Você pode lançá-lo em várias plataformas, como a Steam, a App Store e o Google Play. É importante fazer uma boa campanha de marketing para garantir que seu jogo seja visto pelos jogadores. Hoje em dia, é muito comum publishers procurarem jogos para publicar ou desenvolvedores procurarem publishers para publicar seus jogos. Normalmente, elas fazem todo o marketing do seu jogo em troca de uma porcentagem das vendas, que varia de acordo com cada uma. Existem algumas publishers que alavancam seu projeto até mesmo durante o desenvolvimento. Fica a dica: Crytivo é uma delas.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusão">Conclusão<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#conclus%C3%A3o" class="hash-link" aria-label="Direct link to Conclusão" title="Direct link to Conclusão">​</a></h2>
<p>Desenvolver um jogo do zero pode ser uma tarefa desafiadora, mas é uma experiência gratificante e divertida. Se você seguir essas etapas, poderá criar seu próprio jogo e compartilhá-lo com o mundo. Lembre-se de ser criativo, perseverante e de se divertir</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bonus-chat-gpt">Bonus: Chat-GPT<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#bonus-chat-gpt" class="hash-link" aria-label="Direct link to Bonus: Chat-GPT" title="Direct link to Bonus: Chat-GPT">​</a></h2>
<p>O ChatGPT tem sido uma ótima ferramenta para quem sabe usá-la corretamente. Se você tem noções de programação, por exemplo, pode criar sistemas completos utilizando o ChatGPT. Porém, é necessário ter cuidado e saber o que está sendo feito, já que é o ChatGPT que está ajudando e não o contrário. Provavelmente, você precisará corrigir o código gerado e adaptá-lo, mas, se usar a ferramenta corretamente, poderá até mesmo se tornar um melhor programador.</p>
<p>Além disso, o ChatGPT também ajuda na criação de roteiros e ideias, mas eu não recomendaria utilizá-lo a não ser que você esteja supervisionando todo o processo, fazendo alterações aqui e ali. Caso contrário, há grandes chances de ser criado um roteiro genérico e até mesmo monótono. No entanto, utilizá-lo de vez em quando pode ser divertido e agregar valor às suas ideias.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="thats-all-folks">That's all folks!<a href="https://wanderingtail.github.io/blog/Como-iniciar-o-desenvolvimento-de-games-do-zero#thats-all-folks" class="hash-link" aria-label="Direct link to That's all folks!" title="Direct link to That's all folks!">​</a></h2>
<p>Irei descrever em posts futuros etapas mais detalhadas explicando os processos internos de se lançar um jogo. Se curtiu o texto, comente abaixo. Deixe sua opinião.</p>
<p>TESTE</p>]]></content>
        <author>
            <name>Kelvin Rosa</name>
            <uri>https://www.linkedin.com/in/kelvin-rosa-0012a041/</uri>
        </author>
        <category label="Tutorial" term="Tutorial"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating an underground bunker and ligthing it using Lumen UE5]]></title>
        <id>https://wanderingtail.github.io/blog/ue5-lumen-start</id>
        <link href="https://wanderingtail.github.io/blog/ue5-lumen-start"/>
        <updated>2022-02-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hi, this is the first post here on the devblog, my name is Kelvin S. Rosa ('frost), I'm the developer behind Lightshaft games, in this blog i will talk about the game I've spent years prototyping, stopping, rethinking, and starting over. The focus of the devblog is to show the progress of the game, the technologies applied, maybe some tutorials…]]></summary>
        <content type="html"><![CDATA[<p>Hi, this is the first post here on the devblog, my name is Kelvin S. Rosa ('frost), I'm the developer behind Lightshaft games, in this blog i will talk about the game I've spent years prototyping, stopping, rethinking, and starting over. The focus of the devblog is to show the progress of the game, the technologies applied, maybe some tutorials…</p>
<p>Seeds of Nature has been in development in my head for over 8 years, it's a complex game with survival mechanics, simulation, farm and much more. Based on the final objective of the game the process is quite complicated for a one man army, my main focus the area I master is programming, I'm not good with drawings, I even know how to model in 3D, animate, do level design, but to speed up the development of the game and finish a demo to show the main idea of the game, I buy ready-made 3D models that would fit with the result I want, my game is called Seeds of Nature, acronym SON.</p>
<p>I would like to have someone on board who could handle the 3D part, but my budget for hiring someone is $0, 100% of the money invested in the game currently has been taken from my funds. Put this project on <a href="https://www.patreon.com/lightshaft">Patreon</a>   to try to get some funds to speedup the creating process, getting someone to the team. In this blog I will talk about the development process, create some tutorials and maybe post some of my pets of unusual species that will be present in the game, let's get to it, in this first post I will talk about the lighting process of the game.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="o-bunker">O Bunker<a href="https://wanderingtail.github.io/blog/ue5-lumen-start#o-bunker" class="hash-link" aria-label="Direct link to O Bunker" title="Direct link to O Bunker">​</a></h2>
<p>Currently the game has many mechanics ready, I will talk about some of them in future posts, lighting was something I wasn't even paying attention to until I remodeled the game's story and realized that it would be essential. As with any good survival and farming game having a day and night cycle is essential, now imagine if you need dark environments in your game like an underground bunker!</p>
<p>The initial part of the game will be focused on a bunker, it will be the place where you will start your journey, I can't say much about the narrative yet, but your adventure/life will start inside a bunker that is running out of basic resources, supplements, you've been locked inside for 3 years, you don't know what happened to the surface in those years that have passed. The power system is starting to fail, you only have 2 weeks of guaranteed food. There is no other option but to go to the surface.</p>
<p>The bunker is equipped with various survivalist equipment, books, recipes, in other words, you have a brief preparation to survive out there if necessary.</p>
<p>As it is a bunker I wanted to make it a place that does not receive external light, as the game has a dynamic lighting system, day and night cycle, seasons, different climates, I needed to use a skylight (light emitted by the sky or material sky), this makes the entire game world lit up including underground parts this made the bunker lit up inside, it's not the result I expected. Leaving only a directional light works as the lighting is not global, but the outside environment is very dark, and the weather is unrealistic.</p>
<table><thead><tr><th style="text-align:center"><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/7-9d657f2cef08619a4942a31b3fc226a8.png" title="Inside it is possible to see a constant light, coming from the skylight, even with the correct shadows.." width="659" height="421" class="img_ev3q"></th></tr></thead><tbody><tr><td style="text-align:center"><em>Inside it is possible to see a constant light, coming from the skylight, even with the correct shadows..</em></td></tr></tbody></table>
<p>This made me rethink the lighting in my game, I tried using Distance Fields and Ambient Occlusion, did it work? Nahh, not how I would like, I had to Bake, and several strange spots appeared inside the bunker, they had to do with the distance mesh size of each object. I decided to study a little more, reset the value of SkyLight, adjusted the directional lights of the sun and moon. It worked out? Yea! it worked, but I noticed that the whole external environment was kind of lifeless, with weak colors, I needed the skylight. A few hours later I realized that I was using Unreal Engine 5 and that it had a new lighting technology called Lumen. I read the documentation, watched some tutorials, and it was time to test it, Project Settings&gt;Rendering&gt;Global Illumination: Lumen. Restart UE5, and presto, there was my bunker, all dark, no interior light!! It was the result I expected.</p>
<p>Now I can create interiors, caves, more bunkers, all using real behaving light. Nowadays there are video cards with raytracing costing the eye of the face, which use raytracing based on hardware, Lumen is nothing more than a raytracing via software. The performance was affected a little, but very little, which in the final version of Unreal Engine 5 will probably have improved a lot. In short, “Lumen” is amazing!</p>
<p>First test with the bunker prototype and Lumen:</p>
<table><thead><tr><th style="text-align:center"><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/15-c697466ca31bfa9f92d3b91e2b8f26e7.png" width="1024" height="625" class="img_ev3q"></th></tr></thead><tbody><tr><td style="text-align:center"><em>Here we have a more real lighting, the only light entering the bunker is the one coming through the door, coming from the sun.</em></td></tr></tbody></table>
<p>With a few tweaks to the interior, we have good interior lighting!
I noticed that the more light I put, the heavier the calculation and the frames decrease, but just set the lights to not affect the calculation of the environment. But anyway I chose to use few lights, because all game systems will be dynamic, each light can be set to a switch, and can be dynamically created by players. But that's for another post where I'll explain the game's electrical power system.</p>
<table><thead><tr><th style="text-align:center"><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/9-ddf7167ad9bd15867904e9f085f9f2ab.png" width="1292" height="757" class="img_ev3q"></th></tr></thead><tbody><tr><td style="text-align:center"><em>Inside the Bunker (WIP) - Underground entrance room with internal lights on.</em></td></tr></tbody></table>
<table><thead><tr><th style="text-align:center"><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/20-84cf1f8422855eb64ec9726b1971fbb4.png" width="1024" height="712" class="img_ev3q"></th></tr></thead><tbody><tr><td style="text-align:center"><em>Bunker Inside (WIP) - Staircase from the basement to the inside of the surface, with the lights on.</em></td></tr></tbody></table>
<table><thead><tr><th style="text-align:center"><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/8-c4fbeca754d6336aaf05206137ef67e1.png" width="1573" height="788" class="img_ev3q"></th></tr></thead><tbody><tr><td style="text-align:center"><em>Bunker Inside (WIP) - Surface level with lights on.</em></td></tr></tbody></table>
<table><thead><tr><th style="text-align:center"><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/10-c762e87b6e63c0d616949170443a1c0d.png" width="1178" height="803" class="img_ev3q"></th></tr></thead><tbody><tr><td style="text-align:center"><em>Inside Bunker (WIP) - Inside the bunker on the Surface, with a view of the stairs to the basement and entrance to the bunker with an outside view, inside light on.</em></td></tr></tbody></table>
<table><thead><tr><th style="text-align:center"><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/11-f850c98ec347c7ffc0b2974c4c43faaf.png" width="1069" height="737" class="img_ev3q"></th></tr></thead><tbody><tr><td style="text-align:center"><em>Bunker Inner Part (WIP) - Inner part of the surface, looking out, and light only in the first room.</em></td></tr></tbody></table>
<table><thead><tr><th style="text-align:center"><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/12-087374439399b0abe4ff41b39502d4eb.png" width="1077" height="640" class="img_ev3q"></th></tr></thead><tbody><tr><td style="text-align:center"><em>Inside the Bunker (WIP) - View from the first room out of the bunker with the lights off, here you can see that the ambient light goes on normally outside.</em></td></tr></tbody></table>
<table><thead><tr><th style="text-align:center"><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/13-1c86c44f85f5643fee72220e35fdab98.png" width="926" height="697" class="img_ev3q"></th></tr></thead><tbody><tr><td style="text-align:center"><em>Outside of the Bunker (WIP) - You can see in the middle of the shadows the door of the bunker, and all the darkness inside because the lights are off.</em></td></tr></tbody></table>
<table><thead><tr><th style="text-align:center"><img decoding="async" loading="lazy" src="https://wanderingtail.github.io/assets/images/14-8cae19f489980ad43ccf9a1682c7e99d.png" width="984" height="696" class="img_ev3q"></th></tr></thead><tbody><tr><td style="text-align:center"><em>Bunker Exterior (WIP) - Now with the interior lights on, you can see that the light behaves in a real way, both the interior shadows are lighter and you can also see the shadow and the external light passing through the door on the side inside the bunker.</em></td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="activating-lumen-on-your-project">Activating Lumen on your project<a href="https://wanderingtail.github.io/blog/ue5-lumen-start#activating-lumen-on-your-project" class="hash-link" aria-label="Direct link to Activating Lumen on your project" title="Direct link to Activating Lumen on your project">​</a></h2>
<p>To use Lumen as default global ilumination, just navigate to <strong>Project Setting</strong>, then <strong>Rendering</strong>, then <strong>Global Illumination</strong> in <strong>Dynamic Global Ilumination Method</strong>, select <strong>Lumen</strong>, the editor will ask to activate <strong>Generate Mesh Distance Fields</strong> if it is not activated, then restart the Engine, Lumen Ilumination will be activated and enabled on your map.
It is possible to controll the quality using Post Process Volumes, I will talk more about it in a post about Lumen Only.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="terrainlandscape-hole">Terrain/Landscape Hole.<a href="https://wanderingtail.github.io/blog/ue5-lumen-start#terrainlandscape-hole" class="hash-link" aria-label="Direct link to Terrain/Landscape Hole." title="Direct link to Terrain/Landscape Hole.">​</a></h2>
<p>In Seeds of Nature the game base/ground is based on a landscape, as the game will be open world the main focus is have zero loading,
Em Seeds Of Nature a base do jogo é composta por um ladscape/terreno, como o jogo será de mundo aberto, o foco é ter zero loading, in order for the bunker to be part of the environment and actually be underground, it was necessary to apply an Unreal feature called Landscape Visibility. I will make a post and a tutorial about it later. This functionality consists of creating a layer on the terrain material that is responsible for the visibility of the terrain, where this mask is applied nothing in the terrain material is rendered and all collision properties are removed, being able to actually traverse the terrain, it is a interesting technique for making caves, holes in the ground, etc.</p>
<p>So that's it, this is my first post, I hope to improve the way I present it from now on. Feel free to comment below, suggestions are welcome, follow me on social media, links in the card below.</p>]]></content>
        <author>
            <name>Kelvin Rosa</name>
            <uri>https://www.linkedin.com/in/kelvin-rosa-0012a041/</uri>
        </author>
        <category label="Unreal Engine" term="Unreal Engine"/>
    </entry>
</feed>